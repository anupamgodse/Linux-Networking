---
- name: Ansible create VM playbook
  hosts: [localhost]
  user: root
  vars_files:
    - vars/config.yml
    
  tasks:
    - name: install packages
      apt:
        name: "{{ packages }}"
        state: present

# Create the required ovs bridges
    - name: Create an OVS bridge
      openvswitch_bridge:
        bridge: "{{ item.br_name }}"
        state: present
      become: yes
      loop: "{{ ovs_networks }}"

# Define the network in bridge mode and start the ovs network infra
    - name: Define OVS network
      virt_net:
        command: define
        name: "{{ item.name }}"
        xml: '{{ lookup("template", "network/bridge-ovs.xml") }}'
      become: yes
      loop: "{{ ovs_networks }}"

    - name: Start OVS network
      virt_net:
        command: start
        name: "{{ item.name }}"
      become: yes
      loop: "{{ ovs_networks }}"

# Configure DHCP for routed/nat mode networks
    - name: Assign IP to bridge
      command: "ip addr add {{ item.ip }} dev {{ item.br_name }} "
      ignore_errors: true
      become: yes
      loop: "{{ ovs_networks }}"
      when: item.mode=="routed" or item.mode=="nat"

    - name: Create DHCP server for the bridge
      command: "sudo dnsmasq --interface={{ item.br_name }} --dhcp-range={{ item.range }},12h --bind-dynamic"
      ignore_errors: true
      become: yes
      loop: "{{ ovs_networks }}"
      when: item.mode=="routed" or item.mode=="nat"


#Configure NAT for networks with mode=nat
    - name: Configure NAT network iptables
      iptables:
        table: nat
        chain: POSTROUTING
        out_interface: "{{ item.br_name }}"
        source: '{{ item.ip }}'
        jump: MASQUERADE
        protocol: icmp
        comment: NAT network enable MASQUERADE
      loop: "{{ ovs_networks }}"
      when: item.mode=="nat"
      ignore_errors: true
      become: yes

# VM configuration: creating, starting and attaching interfaces

# # defining and launching an LXC guest
#     - name: Configure vm xml
#       script: scripts/generate_vm.py
#       args:
#         executable: python3
#       loop: "{{ VMs }}"

#     - name: define vm
#       virt:
#         command: define
#         xml: "{{ lookup('template', '{{item.name}}-template.xml.j2') }}"
#         uri: 'lxc:///'
#       loop: "{{ VMs }}"
      
#     - name: start vm
#       virt:
#         name: "{{ item.name }}"
#         state: running
#         uri: 'lxc:///'
#       loop: "{{ VMs }}"

#     # setting autostart on a qemu VM (default uri)
#     - name: set autostart for a VM
#       virt:
#         name: foo
#         autostart: yes

    - name: Install all VMs
      become: yes
      command: virt-clone --original sampleVM -n {{ item.name }} --auto-clone
      ignore_errors: yes
      loop: "{{ VMs }}"

    - name: Start all VMs
      virt:
        name: "{{ item.name }}"
        command: start
        state: running
      ignore_errors: true
      loop: "{{ VMs }}"

    - name: Attach interface to VM1
      command: virsh attach-interface --domain {{ item.0.name }} --type network --source {{ item.1 }} --model virtio --config --live
      become: yes
      with_subelements: 
        - "{{ VMs }}"
        - networks
    
    