---
- name: Ansible create VM playbook
  hosts: [localhost]
  user: root
  vars_files:
    - vars/nw_config.yml
    - vars/vm_config.yml
    
  tasks:
    - name: install packages
      apt:
        name: "{{ packages }}"
        state: present

# Create the required ovs bridges
    - name: Create an OVS bridge
      openvswitch_bridge:
        bridge: "{{ item.br_name }}"
        state: present
      become: yes
      loop: "{{ ovs_networks }}"

# Define the network in bridge mode and start the ovs network infra
    - name: Define OVS network
      virt_net:
        command: define
        name: "{{ item.name }}"
        xml: '{{ lookup("template", "network/bridge-ovs.xml") }}'
      become: yes
      loop: "{{ ovs_networks }}"

    - name: Start OVS network
      virt_net:
        command: start
        name: "{{ item.name }}"
      become: yes
      loop: "{{ ovs_networks }}"

# Configure DHCP for routed/nat mode networks
    - name: Assign IP to bridge
      command: "ifconfig {{ item.br_name }} {{ item.ip }}"
      ignore_errors: true
      become: yes
      loop: "{{ ovs_networks }}"
      when: item.mode=="routed" or item.mode=="nat"

    - name: Create DHCP server for the bridge
      command: "dnsmasq --interface={{ item.br_name }} --dhcp-range={{ item.range }},12h --bind-interfaces --except-interface=lo"
      ignore_errors: true
      become: yes
      loop: "{{ ovs_networks }}"
      when: item.mode=="routed" or item.mode=="nat"


#Configure NAT for networks with mode=nat
    - name: Configure NAT network iptables
      iptables:
        table: nat
        chain: POSTROUTING
        destination: "!{{ item.ip }}"
        source: "{{ item.ip }}"
        jump: MASQUERADE
        comment: NAT network enable MASQUERADE
      loop: "{{ ovs_networks }}"
      when: item.mode=="nat"
      ignore_errors: true
      become: yes

- name: Define and create VMs
  import_playbook: playbooks/create-vms.yml --extra-vars @vm_config.yml
